#!/usr/bin/env python3

import json
import random

from argparse import ArgumentParser, FileType

from transformers import pipeline, set_seed

MODEL = 'gerpt2-large'

def get_parser() -> ArgumentParser:
    '''
    Parse arguments via command-line.
    '''
    parser = ArgumentParser()
    parser.add_argument('-d', '--dict',
                    type=FileType('r'),
                    required=True,
                    help='Path to dictionary with animated nouns.')
    parser.add_argument('-o', '--output_file',
                    type=FileType('w'),
                    required=True,
                    help='Path to store generated json predictions.')
    parser.add_argument('-s', '--seed',
                    type=int,
                    default=2022,
                    help='Random seed for generation.')
    parser.add_argument('--gpu',
                    type=int,
                    default=0,
                    help='GPU to run generation on.')
    parser.add_argument('--max_length',
                    type=int,
                    default=100,
                    help='Maximum length of the generated texts.')
    parser.add_argument('--num_generations',
                    type=int,
                    default=10,
                    help='Number of generated texts to return per prompt.')
    return parser


def main():
    '''
    Generate gender-fair text based on animated seed nouns.
    '''
    parser = get_parser()
    args = parser.parse_args()

    animated_nouns = json.load(args.dict)

    prompts = []

    for i in animated_nouns:
        prompts.append(f'Ein*e {i}*in')

    set_seed(args.seed)
    generator = pipeline('text-generation', model=MODEL, device=args.gpu)
    json_data = generator(prompts,
                          max_length=args.max_length,
                          num_return_sequences=args.num_generations,
                          do_sample=True)

    json.dump(json_data, args.output_file, ensure_ascii=False, indent=2)

if __name__ == '__main__':
    main()
